@model IEnumerable<Electro_ECommerce.Models.Category>

@{
    ViewData["Title"] = "Categories";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div class="container-fluid mt-4">
    <!-- Header Section -->
    <div class="d-flex flex-column flex-md-row justify-content-between align-items-md-center mb-4">
        <div class="mb-3 mb-md-0">
            <h2 class="fw-bold mb-1">Product Categories</h2>
            <p class="text-muted mb-0">Manage and organize your product catalog</p>
        </div>
        <div class="d-flex gap-2">
            <a asp-action="Create" class="btn btn-primary">
                <i class="fas fa-plus me-2"></i>Add Category
            </a>           
        </div>
    </div>

    <!-- Filters and Search -->
    <div class="card shadow-sm border-0 rounded-lg mb-4">
        <div class="card-body p-3">
            <div class="row g-3">
                <div class="col-md-6 col-lg-4">
                    <div class="input-group">
                        <span class="input-group-text bg-light border-0">
                            <i class="fas fa-search text-muted"></i>
                        </span>
                        <input type="text" id="searchInput" class="form-control border-0 bg-light" placeholder="Search categories..." />
                    </div>
                </div>
                <div class="col-md-6 col-lg-4">
                    <select id="sortOrder" class="form-select bg-light border-0">
                        <option value="name-asc">Sort by Name (A-Z)</option>
                        <option value="name-desc">Sort by Name (Z-A)</option>
                        <option value="products-desc">Sort by Most Products</option>
                        <option value="date-desc">Sort by Newest</option>
                    </select>
                </div>
                <div class="col-lg-4 d-flex justify-content-lg-end">
                    <div class="btn-group" role="group">
                        <button type="button" class="btn btn-light active" id="gridView" data-bs-toggle="tooltip" title="Grid View">
                            <i class="fas fa-th-large"></i>
                        </button>
                        <button type="button" class="btn btn-light" id="listView" data-bs-toggle="tooltip" title="List View">
                            <i class="fas fa-list"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Stats Summary -->
    <div class="row g-4 mb-4">
        <div class="col-md-4">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body d-flex align-items-center">
                    <div class="rounded-circle bg-primary bg-opacity-10 p-3 me-3">
                        <i class="fas fa-tags fa-lg text-primary"></i>
                    </div>
                    <div>
                        <h6 class="text-muted mb-1">Total Categories</h6>
                        <h3 class="mb-0 fw-bold">@Model.Count()</h3>
                    </div>
                </div>
            </div>
        </div>
       
    </div>

    <!-- Grid View -->
    <div class="row g-4" id="categoriesGrid">
        @foreach (var item in Model)
        {
            <div class="col-xl-3 col-lg-4 col-md-6 category-item"
                 data-name="@item.Name?.ToLower()"
                 data-products="@(item.Products?.Count ?? 0)"
                 data-date="@(item.CreatedAt?.Ticks ?? 0)">
                <div class="card h-100 border-0 shadow-sm category-card">
                    <div class="position-relative category-image-container">
                        <img src="@Url.Content(item.ImageUrl ?? "/img/default.jpg")"
                             class="card-img-top w-100 h-100 object-fit-cover"
                             alt="@item.Name"
                             onerror="this.src='/img/default.jpg'; this.onerror=null;" />

                        <!-- Quick Actions Overlay -->
                        <div class="category-overlay">
                            <div class="d-flex gap-2">
                                <a asp-action="Edit" asp-route-id="@item.CategoryId" class="btn btn-sm btn-light" data-bs-toggle="tooltip" title="Edit">
                                    <i class="fas fa-pencil-alt"></i>
                                </a>
                                <a asp-action="Details" asp-route-id="@item.CategoryId" class="btn btn-sm btn-light" data-bs-toggle="tooltip" title="View Details">
                                    <i class="fas fa-eye"></i>
                                </a>
                                <a asp-action="Delete" asp-route-id="@item.CategoryId" class="btn btn-sm btn-light" data-bs-toggle="tooltip" title="Delete">
                                    <i class="fas fa-trash"></i>
                                </a>
                            </div>
                        </div>

                        

                        <!-- Category Name -->
                        <div class="position-absolute bottom-0 start-0 w-100 p-3 bg-dark bg-opacity-75">
                            <h5 class="card-title text-white mb-0 text-truncate">@item.Name</h5>
                        </div>
                    </div>

                    <div class="card-body p-3">
                        <div class="mb-3">
                            <p class="card-text text-muted mb-0" style="height: 60px; overflow: hidden;">
                                @if (!string.IsNullOrEmpty(item.Description))
                                {
                                    @(item.Description.Length > 100 ? item.Description.Substring(0, 100) + "..." : item.Description)
                                }
                                else
                                {
                                    <span class="fst-italic">No description available</span>
                                }
                            </p>
                        </div>

                        <div class="d-flex justify-content-between align-items-center">
                            <small class="text-muted">
                                <i class="fas fa-clock me-1"></i>
                                @(item.UpdatedAt?.ToString("MMM dd, yyyy") ?? "N/A")
                            </small>
                            <a asp-action="Edit" asp-route-id="@item.CategoryId" class="btn btn-sm btn-outline-primary">
                                <i class="fas fa-pencil-alt me-1"></i>Edit
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- List View -->
    <div class="card border-0 shadow-sm d-none" id="categoriesList">
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover align-middle mb-0">
                    <thead class="bg-light">
                        <tr>
                            <th class="ps-4">Category</th>
                            <th>Description</th>
                            <th>Products</th>
                            <th>Last Updated</th>
                            <th class="text-end pe-4">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr class="category-item"
                                data-name="@item.Name?.ToLower()"
                                data-products="@(item.Products?.Count ?? 0)"
                                data-date="@(item.CreatedAt?.Ticks ?? 0)">
                                <td class="ps-4">
                                    <div class="d-flex align-items-center">
                                        <div class="flex-shrink-0 me-3">
                                            <img src="@Url.Content(item.ImageUrl ?? "/img/default.jpg")"
                                                 class="rounded"
                                                 alt="@item.Name"
                                                 width="50" height="50"
                                                 style="object-fit: cover;"
                                                 onerror="this.src='/img/default.jpg'; this.onerror=null;" />
                                        </div>
                                        <div class="flex-grow-1 min-width-0">
                                            <h6 class="mb-0 text-truncate">@item.Name</h6>
                                            <small class="text-muted">ID: @item.CategoryId</small>
                                        </div>
                                    </div>
                                </td>
                                <td style="max-width: 300px;">
                                    <div class="text-truncate">
                                        @if (!string.IsNullOrEmpty(item.Description))
                                        {
                                            @item.Description
                                        }
                                        else
                                        {
                                            <span class="fst-italic text-muted">No description</span>
                                        }
                                    </div>
                                </td>
                                <td>
                                    <span class="badge bg-light text-dark">
                                        <i class="fas fa-box me-1"></i>@(item.Products?.Count ?? 0)
                                    </span>
                                </td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <i class="fas fa-clock text-muted me-2"></i>
                                        @(item.UpdatedAt?.ToString("MMM dd, yyyy") ?? "N/A")
                                    </div>
                                </td>
                                <td class="text-end pe-4">
                                    <div class="btn-group">
                                        <a asp-action="Edit" asp-route-id="@item.CategoryId" class="btn btn-sm btn-outline-primary">
                                            <i class="fas fa-pencil-alt"></i>
                                        </a>
                                        <a asp-action="Details" asp-route-id="@item.CategoryId" class="btn btn-sm btn-outline-secondary">
                                            <i class="fas fa-eye"></i>
                                        </a>
                                        <a asp-action="Delete" asp-route-id="@item.CategoryId" class="btn btn-sm btn-outline-danger">
                                            <i class="fas fa-trash"></i>
                                        </a>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Empty State -->
    @if (!Model.Any())
    {
        <div class="text-center py-5">
            <div class="empty-state">
                <i class="fas fa-tags fa-4x text-muted mb-3"></i>
                <h4>No Categories Found</h4>
                <p class="text-muted">Get started by creating your first product category</p>
                <a asp-action="Create" class="btn btn-primary mt-3">
                    <i class="fas fa-plus me-2"></i>Add Category
                </a>
            </div>
        </div>
    }

    <!-- No Results Message -->
    <div id="noResults" class="text-center py-5 d-none">
        <div class="empty-state">
            <i class="fas fa-search fa-4x text-muted mb-3"></i>
            <h4>No Categories Found</h4>
            <p class="text-muted">Try adjusting your search criteria</p>
            <button id="clearSearch" class="btn btn-outline-secondary mt-3">
                <i class="fas fa-times me-2"></i>Clear Search
            </button>
        </div>
    </div>
</div>

<style>
    .category-card {
        transition: all 0.3s ease;
        overflow: hidden;
    }

        .category-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.1) !important;
        }

    .category-image-container {
        height: 200px;
        overflow: hidden;
    }

    .category-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        opacity: 0;
        transition: all 0.3s ease;
    }

    .category-card:hover .category-overlay {
        opacity: 1;
    }

    .object-fit-cover {
        object-fit: cover;
    }

    .min-width-0 {
        min-width: 0;
    }

    .empty-state {
        padding: 3rem;
        background-color: #f8f9fa;
        border-radius: 1rem;
        display: inline-block;
    }

    /* Animation for cards */
    .category-item {
        opacity: 0;
        transform: translateY(20px);
        animation: fadeInUp 0.5s ease forwards;
    }

    @@keyframes fadeInUp {
        to

    {
        opacity: 1;
        transform: translateY(0);
    }

    }</style>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize tooltips
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });

            // Staggered animation for category cards
            const categoryItems = document.querySelectorAll('.category-item');
            categoryItems.forEach((item, index) => {
                item.style.animationDelay = `${index * 0.05}s`;
            });

            // Elements
            const searchInput = document.getElementById('searchInput');
            const sortOrder = document.getElementById('sortOrder');
            const gridView = document.getElementById('gridView');
            const listView = document.getElementById('listView');
            const categoriesGrid = document.getElementById('categoriesGrid');
            const categoriesList = document.getElementById('categoriesList');
            const noResults = document.getElementById('noResults');
            const clearSearch = document.getElementById('clearSearch');

            // Search function
            function filterCategories() {
                const searchTerm = searchInput.value.toLowerCase();
                let visibleCount = 0;

                categoryItems.forEach(item => {
                    const name = item.dataset.name;
                    const matchesSearch = name && name.includes(searchTerm);

                    if (matchesSearch) {
                        item.classList.remove('d-none');
                        visibleCount++;
                    } else {
                        item.classList.add('d-none');
                    }
                });

                // Show/hide no results message
                if (visibleCount === 0 && categoryItems.length > 0) {
                    noResults.classList.remove('d-none');
                    categoriesGrid.classList.add('d-none');
                    categoriesList.classList.add('d-none');
                } else {
                    noResults.classList.add('d-none');
                    if (gridView.classList.contains('active')) {
                        categoriesGrid.classList.remove('d-none');
                    } else {
                        categoriesList.classList.remove('d-none');
                    }
                }
            }

            // Sort function
            function sortCategories() {
                const value = sortOrder.value;
                const gridItems = Array.from(categoriesGrid.children);
                const listItems = Array.from(document.querySelectorAll('#categoriesList tbody tr'));

                // Sort grid items
                gridItems.sort((a, b) => {
                    const itemA = a.querySelector('.category-item');
                    const itemB = b.querySelector('.category-item');

                    if (!itemA || !itemB) return 0;

                    switch(value) {
                        case 'name-asc':
                            return (itemA.dataset.name || '').localeCompare(itemB.dataset.name || '');
                        case 'name-desc':
                            return (itemB.dataset.name || '').localeCompare(itemA.dataset.name || '');
                        case 'products-desc':
                            return parseInt(itemB.dataset.products || 0) - parseInt(itemA.dataset.products || 0);
                        case 'date-desc':
                            return parseInt(itemB.dataset.date || 0) - parseInt(itemA.dataset.date || 0);
                        default:
                            return 0;
                    }
                });

                // Sort list items
                listItems.sort((a, b) => {
                    switch(value) {
                        case 'name-asc':
                            return (a.dataset.name || '').localeCompare(b.dataset.name || '');
                        case 'name-desc':
                            return (b.dataset.name || '').localeCompare(a.dataset.name || '');
                        case 'products-desc':
                            return parseInt(b.dataset.products || 0) - parseInt(a.dataset.products || 0);
                        case 'date-desc':
                            return parseInt(b.dataset.date || 0) - parseInt(a.dataset.date || 0);
                        default:
                            return 0;
                    }
                });

                // Reorder elements
                gridItems.forEach(item => {
                    categoriesGrid.appendChild(item);
                });

                const tbody = document.querySelector('#categoriesList tbody');
                if (tbody) {
                    listItems.forEach(item => {
                        tbody.appendChild(item);
                    });
                }
            }

            // View toggle function
            function toggleView(viewType) {
                if (viewType === 'grid') {
                    categoriesGrid.classList.remove('d-none');
                    categoriesList.classList.add('d-none');
                    gridView.classList.add('active');
                    listView.classList.remove('active');
                    localStorage.setItem('categoryView', 'grid');
                } else {
                    categoriesGrid.classList.add('d-none');
                    categoriesList.classList.remove('d-none');
                    gridView.classList.remove('active');
                    listView.classList.add('active');
                    localStorage.setItem('categoryView', 'list');
                }
            }

            // Clear search function
            function clearSearchFilter() {
                searchInput.value = '';
                filterCategories();
                searchInput.focus();
            }

            // Event listeners
            if (searchInput) searchInput.addEventListener('input', filterCategories);
            if (sortOrder) sortOrder.addEventListener('change', sortCategories);
            if (gridView) gridView.addEventListener('click', () => toggleView('grid'));
            if (listView) listView.addEventListener('click', () => toggleView('list'));
            if (clearSearch) clearSearch.addEventListener('click', clearSearchFilter);

            // Check localStorage for view preference
            const savedView = localStorage.getItem('categoryView');
            if (savedView === 'list') {
                toggleView('list');
            }

            // Initial sort
            if (sortOrder) sortCategories();

            // Add animation to the main container
            const container = document.querySelector('.container-fluid');
            if (container) {
                container.style.opacity = '0';
                container.style.transform = 'translateY(20px)';
                container.style.transition = 'opacity 0.5s ease, transform 0.5s ease';

                setTimeout(() => {
                    container.style.opacity = '1';
                    container.style.transform = 'translateY(0)';
                }, 100);
            }
        });
    </script>
}