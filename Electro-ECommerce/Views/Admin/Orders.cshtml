@model Electro_ECommerce.Models.ViewModels.AdminOrderListViewModel
@{
    ViewData["Title"] = "Order Management";
    Layout = "_AdminLayout";
}

<div class="container-fluid mt-4">
    <!-- Header Section -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2 class="fw-bold mb-0">Order Management</h2>
            <p class="text-muted">View and manage customer orders</p>
        </div>
    </div>

    <!-- Order Statistics Cards -->
    <div class="row g-3 mb-4">
        <div class="col-md-4 col-lg-2">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body">
                    <h6 class="text-muted mb-1">Total Orders</h6>
                    <h3 class="mb-0 fw-bold">@Model.TotalOrders</h3>
                </div>
            </div>
        </div>
        <div class="col-md-4 col-lg-2">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body">
                    <h6 class="text-muted mb-1">Pending</h6>
                    <h3 class="mb-0 fw-bold text-info">@Model.PendingOrders</h3>
                </div>
            </div>
        </div>
        <div class="col-md-4 col-lg-2">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body">
                    <h6 class="text-muted mb-1">Processing</h6>
                    <h3 class="mb-0 fw-bold text-primary">@Model.ProcessingOrders</h3>
                </div>
            </div>
        </div>
        <div class="col-md-4 col-lg-2">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body">
                    <h6 class="text-muted mb-1">Shipped</h6>
                    <h3 class="mb-0 fw-bold text-indigo">@Model.ShippedOrders</h3>
                </div>
            </div>
        </div>
        <div class="col-md-4 col-lg-2">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body">
                    <h6 class="text-muted mb-1">Completed</h6>
                    <h3 class="mb-0 fw-bold text-success">@Model.CompletedOrders</h3>
                </div>
            </div>
        </div>
        <div class="col-md-4 col-lg-2">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body">
                    <h6 class="text-muted mb-1">Cancelled</h6>
                    <h3 class="mb-0 fw-bold text-danger">@Model.CancelledOrders</h3>
                </div>
            </div>
        </div>
    </div>

    

    <!-- Pagination Info -->
    <div class="d-flex justify-content-between align-items-center mb-3">
        <p class="mb-0 text-muted">
            Showing @((Model.CurrentPage - 1) * Model.PageSize + 1) to @(Math.Min(Model.CurrentPage * Model.PageSize, Model.TotalOrders)) of @Model.TotalOrders orders
        </p>
    </div>

    <!-- Orders Table -->
    <div class="card shadow-sm border-0 rounded-lg">
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover align-middle mb-0">
                    <thead class="bg-light">
                        <tr>
                            <th class="ps-4">Order ID</th>
                            <th>Customer</th>
                            <th>Date</th>
                            <th>Amount</th>
                            <th>Status</th>
                            <th class="text-end pe-4">Details</th>
                        </tr>
                    </thead>
                    <tbody id="ordersTableBody">
                        @if (Model.Orders != null && Model.Orders.Any())
                        {
                            foreach (var order in Model.Orders)
                            {
                                <tr class="order-row">
                                    <td class="ps-4 fw-medium">#@order.OrderId</td>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <div class="avatar-circle bg-primary text-white me-3">
                                                @(order.User?.UserName?.Substring(0, 1).ToUpper() ?? "U")
                                            </div>
                                            <div>
                                                <h6 class="mb-0">@(order.User?.UserName ?? "Unknown")</h6>
                                                @if (order.User?.Email != null)
                                                {
                                                    <small class="text-muted">@order.User.Email</small>
                                                }
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        @if (order.OrderDate.HasValue)
                                        {
                                            <div class="d-flex flex-column">
                                                <span>@order.OrderDate.Value.ToString("dd MMM yyyy")</span>
                                                <small class="text-muted">@order.OrderDate.Value.ToString("HH:mm")</small>
                                            </div>
                                        }
                                        else
                                        {
                                            <span>N/A</span>
                                        }
                                    </td>
                                    <td class="fw-medium">@order.TotalAmount.ToString("C2", System.Globalization.CultureInfo.CurrentCulture)</td>
                                    <td>
                                        <span class="badge @GetStatusBadgeClass(order.Status)">
                                            @order.Status
                                        </span>
                                    </td>
                                    <td class="text-end pe-4">
                                        <div class="btn-group">
                                            <a class="btn btn-sm btn-outline-primary" asp-action="OrderDetails" asp-route-id="@order.OrderId">
                                                <i class="fas fa-eye"></i>
                                            </a>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="6" class="text-center py-5">
                                    <div class="empty-state">
                                        <i class="fas fa-shopping-cart fa-3x text-muted mb-3"></i>
                                        <h5>No orders found</h5>
                                        <p class="text-muted">There are no orders to display</p>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- No Results Message -->
            <div id="noResults" class="text-center py-5 d-none">
                <div class="empty-state">
                    <i class="fas fa-search fa-3x text-muted mb-3"></i>
                    <h5>No orders found</h5>
                    <p class="text-muted">Try adjusting your search or filter criteria</p>
                    <button id="clearFilters" class="btn btn-outline-primary mt-2">
                        <i class="fas fa-redo-alt me-2"></i>Clear Filters
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Pagination Controls -->
    @if (Model.TotalPages > 1)
    {
        <nav aria-label="Page navigation" class="mt-4">
            <ul class="pagination justify-content-center">
                <!-- Previous page -->
                <li class="page-item @(!Model.HasPreviousPage ? "disabled" : "")">
                    <a class="page-link" asp-action="Orders" asp-route-page="@(Model.CurrentPage - 1)" aria-label="Previous">
                        <span aria-hidden="true">&laquo;</span>
                    </a>
                </li>

                <!-- Page numbers -->
                @{
                    int startPage = Math.Max(1, Model.CurrentPage - 2);
                    int endPage = Math.Min(Model.TotalPages, startPage + 4);

                    if (endPage - startPage < 4 && startPage > 1)
                    {
                        startPage = Math.Max(1, endPage - 4);
                    }
                }

                @if (startPage > 1)
                {
                    <li class="page-item">
                        <a class="page-link" asp-action="Orders" asp-route-page="1">1</a>
                    </li>
                    @if (startPage > 2)
                    {
                        <li class="page-item disabled">
                            <span class="page-link">...</span>
                        </li>
                    }
                }

                @for (int i = startPage; i <= endPage; i++)
                {
                    <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                        <a class="page-link" asp-action="Orders" asp-route-page="@i">@i</a>
                    </li>
                }

                @if (endPage < Model.TotalPages)
                {
                    @if (endPage < Model.TotalPages - 1)
                    {
                        <li class="page-item disabled">
                            <span class="page-link">...</span>
                        </li>
                    }
                    <li class="page-item">
                        <a class="page-link" asp-action="Orders" asp-route-page="@Model.TotalPages">@Model.TotalPages</a>
                    </li>
                }

                <!-- Next page -->
                <li class="page-item @(!Model.HasNextPage ? "disabled" : "")">
                    <a class="page-link" asp-action="Orders" asp-route-page="@(Model.CurrentPage + 1)" aria-label="Next">
                        <span aria-hidden="true">&raquo;</span>
                    </a>
                </li>
            </ul>
        </nav>
    }
</div>

@functions {
    private string GetStatusBadgeClass(string status)
    {
        return status?.ToLower() switch
        {
            "completed" => "bg-success",           // Green
            "processing" => "bg-primary",          // Blue
            "pending" => "bg-info",                // Light blue
            "shipped" => "bg-indigo",              // Indigo
            "delivered" => "bg-teal",              // Teal
            "cancelled" => "bg-danger",            // Red
            "refunded" => "bg-pink",               // Pink
            "on hold" => "bg-warning",             // Yellow
            "backordered" => "bg-orange",          // Orange
            "failed" => "bg-dark",                 // Dark gray
            "returned" => "bg-secondary",          // Gray
            "awaiting payment" => "bg-purple",     // Purple
            _ => "bg-light text-dark"              // Light gray with dark text for any other status
        };
    }
}

<style>
    /* Custom badge colors that aren't in Bootstrap by default */
    .bg-indigo {
        background-color: #6610f2 !important;
        color: white;
    }

    .bg-teal {
        background-color: #20c997 !important;
        color: white;
    }

    .bg-orange {
        background-color: #fd7e14 !important;
        color: white;
    }

    .bg-pink {
        background-color: #e83e8c !important;
        color: white;
    }

    .bg-purple {
        background-color: #6f42c1 !important;
        color: white;
    }

    /* Make badges more visible */
    .badge {
        font-size: 0.85rem;
        padding: 0.35em 0.65em;
        font-weight: 500;
    }

    /* Avatar circle */
    .avatar-circle {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 600;
    }

    /* Empty state */
    .empty-state {
        padding: 2rem;
        display: inline-block;
    }

    /* Animation for table rows */
    .order-row {
        opacity: 0;
        transform: translateY(10px);
        animation: fadeInUp 0.5s ease forwards;
    }

    @@keyframes fadeInUp {
        to

    {
        opacity: 1;
        transform: translateY(0);
    }

    }

    /* Hover effect for table rows */
    .order-row:hover {
        background-color: rgba(78, 115, 223, 0.05);
    }

    /* Pagination styling */
    .pagination {
        margin-top: 1.5rem;
    }

    .page-item.active .page-link {
        background-color: #4e73df;
        border-color: #4e73df;
    }

    .page-link {
        color: #4e73df;
    }

        .page-link:hover {
            color: #2e59d9;
        }

    .page-item.disabled .page-link {
        color: #6c757d;
    }
</style>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Staggered animation for table rows
            const orderRows = document.querySelectorAll('.order-row');
            orderRows.forEach((row, index) => {
                row.style.animationDelay = `${index * 0.05}s`;
            });

            // Search and filter functionality
            const searchInput = document.getElementById('searchInput');
            const statusFilter = document.getElementById('statusFilter');
            const dateFilter = document.getElementById('dateFilter');
            const resetFilters = document.getElementById('resetFilters');
            const clearFilters = document.getElementById('clearFilters');
            const ordersTableBody = document.getElementById('ordersTableBody');
            const noResults = document.getElementById('noResults');
            const orderRows = document.querySelectorAll('.order-row');

            function filterOrders() {
                const searchTerm = searchInput.value.toLowerCase();
                const statusValue = statusFilter.value.toLowerCase();
                const dateValue = dateFilter.value.toLowerCase();
                let visibleCount = 0;

                orderRows.forEach(row => {
                    const orderId = row.querySelector('td:first-child').textContent.toLowerCase();
                    const customer = row.querySelector('td:nth-child(2)').textContent.toLowerCase();
                    const status = row.querySelector('.badge').textContent.toLowerCase();

                    // Simple search filter
                    const matchesSearch = orderId.includes(searchTerm) ||
                                         customer.includes(searchTerm);

                    // Status filter
                    const matchesStatus = statusValue === '' || status.includes(statusValue);

                    // Date filter (simplified - in a real app you'd use actual date comparison)
                    const matchesDate = dateValue === ''; // For demo, we're not implementing date filtering

                    if (matchesSearch && matchesStatus && matchesDate) {
                        row.classList.remove('d-none');
                        visibleCount++;
                    } else {
                        row.classList.add('d-none');
                    }
                });

                // Show/hide no results message
                if (visibleCount === 0 && orderRows.length > 0) {
                    if (noResults) noResults.classList.remove('d-none');
                    if (ordersTableBody) ordersTableBody.classList.add('d-none');
                } else {
                    if (noResults) noResults.classList.add('d-none');
                    if (ordersTableBody) ordersTableBody.classList.remove('d-none');
                }
            }

            // Reset filters
            function resetAllFilters() {
                if (searchInput) searchInput.value = '';
                if (statusFilter) statusFilter.value = '';
                if (dateFilter) dateFilter.value = '';
                filterOrders();
            }

            // Event listeners
            if (searchInput) searchInput.addEventListener('input', filterOrders);
            if (statusFilter) statusFilter.addEventListener('change', filterOrders);
            if (dateFilter) dateFilter.addEventListener('change', filterOrders);
            if (resetFilters) resetFilters.addEventListener('click', resetAllFilters);
            if (clearFilters) clearFilters.addEventListener('click', resetAllFilters);
        });
    </script>
}